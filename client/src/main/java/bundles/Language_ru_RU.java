package bundles;

import java.util.ListResourceBundle;

public class Language_ru_RU extends ListResourceBundle {
    private static final Object[][] contents = {
            //Main.java
            {"cantStartErrorForLog", "Не удалось запустить программу, т.к. не переданы IP и порт!"},
            {"cantStartAlertHeader", "Ошибка запуска программы"},
            {"cantStartAlertContent", "Программа не запущена, так как не переданы IP (или hostname) и порт сервера!\n(Они должны быть переданы через аргументы командной строки. Формат IP: xxx.xxx.xxx.xxx; формат hostname: непустая строка; формат порта: число от 1 до 65535.)"},
            {"wrongPortErrorForLog", "Не удалось запустить программу из-за неправильного формата порта: "},
            {"wrongPortAlertContent", "Программа не запущена, так как указан неправильный формат порта!\n(число от 1 до 65535 должно быть передано вторым аргументом командной строки)"},

            //start.fxml
            {"startWindowTitle", "Вход в программу"},
            {"authorisation", "Авторизация"},
            {"registration", "Регистрация"},
            {"login", "Логин"},
            {"password", "Пароль"},
            {"proceedSignIn", "ВХОД"},
            {"proceedSignUp", "РЕГИСТРАЦИЯ"},
            {"emptyLoginError", "Имя пользователя не может\nбыть пустым!"},
            {"longLoginError", "Имя пользователя не может\nбыть длиннее 20 символов!"},
            {"emptyPasswordError", "Пароль не может быть пустым!"},
            {"mainWindowTitle", "Управление коллекцией групп"},
            {"wrongPassword", "Неправильный пароль!"},
            {"userNotExists", "Такого пользователя не существует!"},
            {"serverCantConnectToDB", "Сервер не смог подключиться к базе данных!\nПопробуйте ещё раз."},
            {"userAlreadyExists", "Такой пользователь\nуже зарегистрирован!"},

            //main.fxml
            {"executeCommand", "Выполнить команду"},
            {"applyFilter", "Применить фильтр"},
            {"proceed", "ВЫПОЛНИТЬ"},
            {"mapWindowTitle", "Карта объектов"},
            {"toMap", "К карте объектов"},
            {"chooseCommand", "Выбрать команду"},
            {"chooseField", "Выбрать поле"},
            {"filterAlertHeader", "Ошибка при установке фильтра"},
            {"filterConditionAlertContent", "Неверный формат условия!\nПримеры корректных условий (числа):\n>5\n<5\n=5\n>=5\n<=5\n!=5\nПримеры корректных условий (строки):\n=text\n!=text"},
            {"collectionLoadAlertHeader", "Ошибка при загрузке элементов коллекции"},
            {"collectionEmptyAlertHeader", "Коллекция пуста!"},
            {"collectionEmptyAlertContent", "Не загружено ни одного элемента."},
            {"filterComparisonAlertContent", "Невозможно сравнить число и строку!"},
            {"condition", "Условие"},
            {"update", "Обновить"},
            {"remove", "Удалить"},
            {"sendErrorAlertHeader", "Ошибка при отправке/получении команды"},
            {"prepareErrorAlertHeader", "Ошибка при проверке аргументов команды"},
            {"command", "Команда "},
            {"executedSuccessfully", " выполнена успешно!"},
            {"executeFailure", "Ошибка при выполнении команды"},
            {"checkArgumentsAlertHeader", "Воникли ошибки при проверке аргументов команды"},
            {"returnedResult", " вернула следующий результат:"},
            {"idError", "Неправильный ввод id! Требуемый формат: целое положительное число.\n"},
            {"nameError", "Неправильный ввод названия продукта! Оно не может быть пустой строкой.\n"},
            {"xError", "Неправильный ввод координаты x! Требуемый формат: дробное число.\n"},
            {"yError", "Неправильный ввод координаты y! Требуемый формат: дробное число.\n"},
            {"priceError", "Неправильный ввод\n"},
            {"partNumError", "Неправильный ввод кода производителя! Требуемый формат: #xxxxxx, где x - цифры.\n"},
            {"manCostError", "Неправильный ввод ID person! Требуемый формат: целое число.\n"},
            {"uomError", "Неправильный ввод единиц измерения! Возможные варианты ввода: "},
            {"manNameError", "Неправильный ввод названия! Оно не может быть пустой строкой.\n"},
            {"turnoverError", "Неправильный ввод! Требуемый формат: пустая строка или целое положительное число.\n"},
            {"empCountError", "Неправильный ввод! Требуемый формат: пустая строка или целое положительное число.\n"},
            {"typeError", "Неправильный ввод! Возможные варианты ввода: пустая строка, "},
            {"stopSessionAlertHeader", "Программа завершает сессию"},
            {"stopSessionAlertContent", "Из-за многочисленных ошибок связи с сервером совершён выход из учётной записи. Повторите позже."},
            {"back", "Обратно"},
            {"signOut", "Выйти"},
            {"updateTooltip","Нажмите дважды, чтобы обновить элемент"},

            //other
            {"changeSceneError", "Ошибка смены сцены"},
            {"jsonError", "Ошибка в синтаксисе JSON-строки! "},
            {"productCreationError", "Команда не выполнена, т.к. не получилось создать продукт!"},

            //Add.java
            {"addInteractiveError", "У команды add не может быть аргументов!"},
            {"addNotInteractiveError", "У команды add должен быть 1 аргумент: JSON-строка!"},
            {"addSqlError", "При добавлении элемента возникла ошибка SQL!"},
            {"addDescription", "Добавляет новый элемент в коллекцию."},
            {"addSyntax", " Синтаксис: add \n(В скриптах - add {element})"},

            //AddIfMax.java
            {"addIfMaxInteractiveError", "У команды add_if_max не может быть аргументов!"},
            {"addIfMaxNotInteractiveError", "У команды add_if_max должен быть 1 аргумент: JSON-строка!"},
            {"addIfMaxSqlError", "Несмотря на то, что цена элемента - наибольшая, он не был добавлен из-за ошибки SQL!"},
            {"addIfMaxError1", "Элемент не добавлен, т.к. его цена - НЕ наибольшая в коллекции."},
            {"addIfMaxSqlError2", "Несмотря на то, что цена элемента - наибольшая (коллекция пуста), он не был добавлен из-за ошибка SQL!"},
            {"addIfMaxDesc", "Добавляет новый элемент в коллекцию, если его цена - наибольшая в коллекции."},
            {"addIfMaxSyntax", " Синтаксис: add_if_max \n(В скриптах - add_if_max {element})"},

            //Exit.java
            {"exitError", "У команды exit не может быть аргументов!"},
            {"exitDesc", "Прекращает работу программы."},
            {"exitSyntax", " Синтаксис: exit"},

            //Clear.java
            {"clearError", "У команды clear не может быть аргументов!"},
            {"clearError1", "Не все элементы были удалены, т.к. возникли ошибки SQL и вы не являетесь владельцем некоторых элементов!"},
            {"clearError2", "Не все элементы были удалены, т.к. возникли ошибки SQL!"},
            {"clearError3", "Не все элементы были удалены, т.к. вы не являетесь владельцем некоторых элементов!"},
            {"clearError4", "Вы не являетесь владельцем ни одного из элементов, поэтому коллекция не очищена!"},
            {"clearError5", "Коллекция пуста, нечего чистить!"},
            {"clearSuccess", "Коллекция очищена!"},
            {"clearDesc", "Очищает коллекцию."},
            {"clearSyntax", " Синтаксис: clear"},

            //History.java
            {"historyError", "У команды history не может быть аргументов!"},
            {"historySuccess", "Комманда history выполнена, последние 7 комманд:"},
            {"historyEmpty", "Список выполненных комманд пуст!"},
            {"historyDesc", "Выводит последние 7 комманд."},
            {"historySyntax", " Синтаксис: history"},

            //Help.java
            {"helpError", "У команды help не может быть аргументов!"},
            {"helpSuccess", "Список допустимых команд:"},
            {"helpDesc", "Выводит справку по доступным коммандам."},
            {"helpSyntax", " Синтаксис: help"},

            //Show.java
            {"showError", "У команды help не может быть аргументов!"},
            {"showDesc", "Выводит коллекцию."},
            {"showSyntax", " Синтаксис: show"},

            //RemoveById.java
            {"removeError", "У команды remove_by_id должен быть 1 аргумент - положительное целое число!"},
            {"removeError1", "При удалении элемента с id "},
            {"removeError2", " произошла ошибка SQL!"},
            {"removeError3", "Вы не являетесь владельцем элемента с id "},
            {"removeError4", ", поэтому у вас нет прав на его удаление!"},
            {"removeError5", "Удаление невозможно, так как в коллекции нет элемента с id "},
            {"removeSuccess1", "Элемент с id "},
            {"removeSuccess2", " успешно удалён!"},
            {"removeDesc", "Удаляет элемент из коллекции по его id."},
            {"removeSyntax", " Синтаксис: remove_by_id id, где id - целое положительное число."},

            //RemoveGreater.java
            {"rgInteractiveError", "У команды remove_greater не может быть аргументов!"},
            {"rgNotInteractiveError", "У команды remove_greater должен быть 1 аргумент: JSON-строка!"},
            {"rgError", "Т.к. коллекция пуста, невозможно удалить из неё элементы, цена которых больше цены данного."},
            {"rgError1", "Не все элементы, цена которых больше цены данного, были удалены!"},
            {"rgError2", "Ничего не удалено, т.к. в коллекции нет элементов, цена которых больше цены данного, или возникли ошибки!"},
            {"rgDesc", "Удаляет из коллеккции все элементы, цена которых больше цены данного."},
            {"rgSyntax", " Синтаксис: remove_greater \n(В скриптах - remove_greater {element}"},

            //Update.java
            {"updateInteractiveError", "У команды update должен быть 1 аргумент - положительное целое число!"},
            {"updateNotInteractiveError", "У команды update должно быть 2 аргумента: положительное целое число и JSON-строка!"},
            {"updateError1", "Нечего обновлять: элемента с id "},
            {"updateError2", " нет в коллекции!"},
            {"updateError3", "При обновлении элемента с id "},
            {"updateError4", ", поэтому у вас нет прав на его изменение!"},
            {"updateDesc", "Обновляет значение элемента коллекции, id которого равен заданному."},
            {"updateSyntax", " Синтаксис: update id, где id - целое положительное число. \n(В скриптах - update id {element})"},

    };

    protected Object[][] getContents() {
        return contents;
    }
}